import localFont from "next/font/local";
import "./globals.css";
import Home from "./page";

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

export const metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function RootLayout({ children }) {
  const url = "https://hsystem.kanbanize.com/api/v2/cards";

  const params = new URLSearchParams({
    board_ids: 10,
    //workflow_ids: 62,
    page: 1,
    per_page: 500,
    fields: "card_id,title,description,custom_id,owner_user_id,type_id,size,priority,color,deadline,reporter,created_at,revision,last_modified,in_current_position_since,board_id,workflow_id,column_id,lane_id,section,position,last_column_id,last_lane_id,version_id,archived_at,reason_id,discard_comment,discarded_at,is_blocked,block_reason,current_block_time,current_logged_time,current_cycle_time,child_card_stats,finished_subtask_count,unfinished_subtask_count,comment_count,first_request_time,first_start_time,first_end_time,last_request_time,last_start_time,last_end_time",
  }).toString();

  const fullUrl = `${url}?${params}`;

  const headers = {
    "Content-Type": "application/json",
    "apikey": process.env.API_KEY 
  };

  var a;
  await fetch(fullUrl, {
    method: "GET",
    headers: headers
  })
    .then(response => {
      if (!response.ok) {
        throw new Error(`Erro: ${response.status}`);
      }
      return response.json();
    })
    .then(data => {
      a = data.data; // Manipule os dados retornados
    })
    .catch(error => {
      console.error("Erro ao fazer a requisição:", error);
    });

  return (
    <html lang="en">
      <body className={`${geistSans.variable} ${geistMono.variable}`}>
        <Home props={a}/>
      </body>
    </html>
  );
}
