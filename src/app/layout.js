import localFont from "next/font/local";
import "./globals.css";
import Home from "./page";

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

export const metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

const teamNamesIds = {
  Lucas: 43
};

export const teamNames = Object.keys(teamNamesIds);
export const teamIds = Object.values(teamNamesIds);

export default async function RootLayout({ children }) {
  const url = "https://hsystem.kanbanize.com/api/v2/cards";

  const params = new URLSearchParams({
    //board_ids: 13,
    //workflow_ids: 62,
    page: 1,
    per_page: 1000,
    state: "archived",
    // A list of properties for which you want to get additional details. The allowed properties at the moment are: custom_fields, stickers, tag_ids, co_owner_ids, watcher_ids, attachments, checked_column_checklist_items, initiative_details, annotations, subtasks, linked_cards, transitions, block_times, logged_times, logged_times_for_child_cards.
    expand: "co_owner_ids",
    fields:
      "card_id,title,description,custom_id,owner_user_id,type_id,size,priority,color,deadline,reporter,created_at,revision,last_modified,in_current_position_since,board_id,workflow_id,column_id,lane_id,section,position,last_column_id,last_lane_id,version_id,archived_at,reason_id,discard_comment,discarded_at,is_blocked,block_reason,current_block_time,current_logged_time,current_cycle_time,child_card_stats,finished_subtask_count,unfinished_subtask_count,comment_count,first_request_time,first_start_time,first_end_time,last_request_time,last_start_time,last_end_time",
  }).toString();

  const fullUrl = `${url}?${params}`;

  console.log(fullUrl);

  const headers = {
    "Content-Type": "application/json",
    apikey: process.env.API_KEY,
  };

  var a;
  await fetch(fullUrl, {
    method: "GET",
    headers: headers,
  })
    .then((response) => {
      if (!response.ok) {
        throw new Error(`Erro: ${response.status}`);
      }
      return response.json();
    })
    .then(({ data }) => {
      // filtrando os cards que pertencem a algum das pessoas do time
      a =
        data.data.filter((item) => {
          if (teamIds.includes(item.owner_user_id)) return true;

          for (const coOwner of item.co_owner_ids) {
            if (teamIds.includes(coOwner)) return true;
          }

          return false;
        }) || [];

      a.forEach((item) => {
        item.pessoas = [item.owner_user_id, ...item.co_owner_ids];
      });
    })
    .catch((error) => {
      console.error("Erro ao fazer a requisição:", error);
    });

  return (
    <html lang="en">
      <body className={`${geistSans.variable} ${geistMono.variable}`}>
        <Home props={{ data: a }} />
      </body>
    </html>
  );
}
